import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import '../services/currency_service.dart';

class CurrencyListScreen extends StatefulWidget {
  final String? mode;

  const CurrencyListScreen({
    Key? key,
    this.mode,
  }) : super(key: key);

  @override
  _CurrencyListScreenState createState() => _CurrencyListScreenState();
}

class _CurrencyListScreenState extends State<CurrencyListScreen> {
  final CurrencyService _currencyService = CurrencyService();
  List<String> currencies = [];
  List<String> filteredCurrencies = [];
  final TextEditingController _searchController = TextEditingController();

  // Map of fiat currency codes to their flag emojis
  final Map<String, String> fiatFlags = {
    'USD': 'ðŸ‡ºðŸ‡¸',
    'EUR': 'ðŸ‡ªðŸ‡º',
    'GBP': 'ðŸ‡¬ðŸ‡§',
    'JPY': 'ðŸ‡¯ðŸ‡µ',
    'CAD': 'ðŸ‡¨ðŸ‡¦',
    'AUD': 'ðŸ‡¦ðŸ‡º',
    'CHF': 'ðŸ‡¨ðŸ‡­',
    'CNY': 'ðŸ‡¨ðŸ‡³',
    'HKD': 'ðŸ‡­ðŸ‡°',
    'NZD': 'ðŸ‡³ðŸ‡¿',
    'SGD': 'ðŸ‡¸ðŸ‡¬',
    'ZAR': 'ðŸ‡¿ðŸ‡¦',
    'INR': 'ðŸ‡®ðŸ‡³',
    'BRL': 'ðŸ‡§ðŸ‡·',
    'RUB': 'ðŸ‡·ðŸ‡º',
    'AED': 'ðŸ‡¦ðŸ‡ª',
    'TWD': 'ðŸ‡¹ðŸ‡¼',
    'KRW': 'ðŸ‡°ðŸ‡·',
    'MXN': 'ðŸ‡²ðŸ‡½',
    'SAR': 'ðŸ‡¸ðŸ‡¦',
    'PLN': 'ðŸ‡µðŸ‡±',
    'DKK': 'ðŸ‡©ðŸ‡°',
    'SEK': 'ðŸ‡¸ðŸ‡ª',
    'NOK': 'ðŸ‡³ðŸ‡´',
    'THB': 'ðŸ‡¹ðŸ‡­',
    'ILS': 'ðŸ‡®ðŸ‡±',
    'QAR': 'ðŸ‡¶ðŸ‡¦',
    'KWD': 'ðŸ‡°ðŸ‡¼',
    'PHP': 'ðŸ‡µðŸ‡­',
    'TRY': 'ðŸ‡¹ðŸ‡·',
    'CZK': 'ðŸ‡¨ðŸ‡¿',
    'IDR': 'ðŸ‡®ðŸ‡©',
    'MYR': 'ðŸ‡²ðŸ‡¾',
    'HUF': 'ðŸ‡­ðŸ‡º',
    'VND': 'ðŸ‡»ðŸ‡³',
    'ISK': 'ðŸ‡®ðŸ‡¸',
    'RON': 'ðŸ‡·ðŸ‡´',
    'HRK': 'ðŸ‡­ðŸ‡·',
    'BGN': 'ðŸ‡§ðŸ‡¬',
    'UAH': 'ðŸ‡ºðŸ‡¦',
    'UYU': 'ðŸ‡ºðŸ‡¾',
    'ARS': 'ðŸ‡¦ðŸ‡·',
    'COP': 'ðŸ‡¨ðŸ‡´',
    'CLP': 'ðŸ‡¨ðŸ‡±',
    'PEN': 'ðŸ‡µðŸ‡ª',
    'MAD': 'ðŸ‡²ðŸ‡¦',
    'NGN': 'ðŸ‡³ðŸ‡¬',
    'KES': 'ðŸ‡°ðŸ‡ª',
    'DZD': 'ðŸ‡©ðŸ‡¿',
    'EGP': 'ðŸ‡ªðŸ‡¬',
    'BDT': 'ðŸ‡§ðŸ‡©',
    'PKR': 'ðŸ‡µðŸ‡°',
    'VEF': 'ðŸ‡»ðŸ‡ª',
    'IRR': 'ðŸ‡®ðŸ‡·',
    'JOD': 'ðŸ‡¯ðŸ‡´',
    'NPR': 'ðŸ‡³ðŸ‡µ',
    'LKR': 'ðŸ‡±ðŸ‡°',
    'OMR': 'ðŸ‡´ðŸ‡²',
    'MMK': 'ðŸ‡²ðŸ‡²',
    'BHD': 'ðŸ‡§ðŸ‡­',
  };

  @override
  void initState() {
    super.initState();
    _loadCurrencies();
  }

  void _loadCurrencies() async {
    final allCurrencies = await _currencyService.getAvailableCurrencies();
    setState(() {
      // For watchlist mode, filter based on crypto/fiat
      if (widget.mode == "Crypto") {
        currencies = allCurrencies
            .where((c) => CurrencyService.cryptoCurrencies.contains(c))
            .toList();
      } else if (widget.mode == "Fiat") {
        currencies = allCurrencies
            .where((c) => !CurrencyService.cryptoCurrencies.contains(c))
            .toList();
      } else {
        // For converter and default currency, show all currencies
        currencies = allCurrencies;
      }
      filteredCurrencies = List.from(currencies);
    });
  }

  void _filterCurrencies(String query) {
    setState(() {
      if (query.isEmpty) {
        filteredCurrencies = List.from(currencies);
      } else {
        filteredCurrencies = currencies
            .where((currency) =>
                currency.toLowerCase().contains(query.toLowerCase()))
            .toList();
      }
    });
  }

  Widget _buildCurrencyIcon(String currency) {
    if (CurrencyService.cryptoCurrencies.contains(currency)) {
      return SvgPicture.asset(
        'assets/crypto_icons/${currency.toLowerCase()}.svg',
        width: 32,
        height: 32,
        placeholderBuilder: (context) => _buildFallbackIcon(currency),
      );
    } else {
      return Container(
        width: 32,
        height: 32,
        decoration: BoxDecoration(
          color: Colors.grey[200],
          shape: BoxShape.circle,
        ),
        child: Center(
          child: Text(
            fiatFlags[currency] ?? currency[0],
            style: TextStyle(fontSize: 16),
          ),
        ),
      );
    }
  }

  Widget _buildFallbackIcon(String currency) {
    return Container(
      width: 32,
      height: 32,
      decoration: BoxDecoration(
        color: Colors.grey[200],
        shape: BoxShape.circle,
      ),
      child: Center(
        child: Text(
          fiatFlags[currency] ?? currency[0],
          style: TextStyle(
            fontSize: 16,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.transparent,
      child: Container(
        height: MediaQuery.of(context).size.height * 0.75,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Drag indicator
              Center(
                child: Container(
                  width: 40,
                  height: 5,
                  margin: EdgeInsets.symmetric(vertical: 10),
                  decoration: BoxDecoration(
                    color: Colors.grey[300],
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),

              // Search bar and title
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Select Currency',
                      style: Theme.of(context).textTheme.headlineMedium,
                    ),
                    SizedBox(height: 16),
                    TextField(
                      controller: _searchController,
                      onChanged: _filterCurrencies,
                      decoration: InputDecoration(
                        hintText: 'Search currency...',
                        prefixIcon: Icon(Icons.search),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        filled: true,
                        fillColor: Colors.grey[100],
                      ),
                    ),
                  ],
                ),
              ),

              // Currency list
              Expanded(
                child: ListView.builder(
                  itemCount: filteredCurrencies.length,
                  itemBuilder: (context, index) {
                    final currency = filteredCurrencies[index];
                    return ListTile(
                      leading: _buildCurrencyIcon(currency),
                      title: Text(currency),
                      onTap: () => Navigator.pop(context, currency),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}
