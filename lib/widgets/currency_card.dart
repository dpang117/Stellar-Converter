import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import '../services/currency_service.dart';

class CurrencyCard extends StatelessWidget {
  final String name;
  final String symbol;
  final String price;
  final String change;
  final String iconUrl;
  final bool isPositive;

  // Map of fiat currency codes to their flag emojis
  static const Map<String, String> fiatFlags = {
    'USD': 'ðŸ‡ºðŸ‡¸',
    'EUR': 'ðŸ‡ªðŸ‡º',
    'GBP': 'ðŸ‡¬ðŸ‡§',
    'JPY': 'ðŸ‡¯ðŸ‡µ',
    'CAD': 'ðŸ‡¨ðŸ‡¦',
    'AUD': 'ðŸ‡¦ðŸ‡º',
    'CHF': 'ðŸ‡¨ðŸ‡­',
    'CNY': 'ðŸ‡¨ðŸ‡³',
    'HKD': 'ðŸ‡­ðŸ‡°',
    'NZD': 'ðŸ‡³ðŸ‡¿',
    'SGD': 'ðŸ‡¸ðŸ‡¬',
    'ZAR': 'ðŸ‡¿ðŸ‡¦',
    'INR': 'ðŸ‡®ðŸ‡³',
    'BRL': 'ðŸ‡§ðŸ‡·',
    'RUB': 'ðŸ‡·ðŸ‡º',
    'AED': 'ðŸ‡¦ðŸ‡ª',
    'TWD': 'ðŸ‡¹ðŸ‡¼',
    'KRW': 'ðŸ‡°ðŸ‡·',
    'MXN': 'ðŸ‡²ðŸ‡½',
    'SAR': 'ðŸ‡¸ðŸ‡¦',
    'PLN': 'ðŸ‡µðŸ‡±',
    'DKK': 'ðŸ‡©ðŸ‡°',
    'SEK': 'ðŸ‡¸ðŸ‡ª',
    'NOK': 'ðŸ‡³ðŸ‡´',
    'THB': 'ðŸ‡¹ðŸ‡­',
    'ILS': 'ðŸ‡®ðŸ‡±',
    'QAR': 'ðŸ‡¶ðŸ‡¦',
    'KWD': 'ðŸ‡°ðŸ‡¼',
    'PHP': 'ðŸ‡µðŸ‡­',
    'TRY': 'ðŸ‡¹ðŸ‡·',
    'CZK': 'ðŸ‡¨ðŸ‡¿',
    'IDR': 'ðŸ‡®ðŸ‡©',
    'MYR': 'ðŸ‡²ðŸ‡¾',
    'HUF': 'ðŸ‡­ðŸ‡º',
    'VND': 'ðŸ‡»ðŸ‡³',
    'ISK': 'ðŸ‡®ðŸ‡¸',
    'RON': 'ðŸ‡·ðŸ‡´',
    'HRK': 'ðŸ‡­ðŸ‡·',
    'BGN': 'ðŸ‡§ðŸ‡¬',
    'UAH': 'ðŸ‡ºðŸ‡¦',
    'UYU': 'ðŸ‡ºðŸ‡¾',
    'ARS': 'ðŸ‡¦ðŸ‡·',
    'COP': 'ðŸ‡¨ðŸ‡´',
    'CLP': 'ðŸ‡¨ðŸ‡±',
    'PEN': 'ðŸ‡µðŸ‡ª',
    'MAD': 'ðŸ‡²ðŸ‡¦',
    'NGN': 'ðŸ‡³ðŸ‡¬',
    'KES': 'ðŸ‡°ðŸ‡ª',
    'DZD': 'ðŸ‡©ðŸ‡¿',
    'EGP': 'ðŸ‡ªðŸ‡¬',
    'BDT': 'ðŸ‡§ðŸ‡©',
    'PKR': 'ðŸ‡µðŸ‡°',
    'VEF': 'ðŸ‡»ðŸ‡ª',
    'IRR': 'ðŸ‡®ðŸ‡·',
    'JOD': 'ðŸ‡¯ðŸ‡´',
    'NPR': 'ðŸ‡³ðŸ‡µ',
    'LKR': 'ðŸ‡±ðŸ‡°',
    'OMR': 'ðŸ‡´ðŸ‡²',
    'MMK': 'ðŸ‡²ðŸ‡²',
    'BHD': 'ðŸ‡§ðŸ‡­',
  };

  const CurrencyCard({
    Key? key,
    required this.name,
    required this.symbol,
    required this.price,
    required this.change,
    required this.iconUrl,
    required this.isPositive,
  }) : super(key: key);

  Widget _buildIcon() {
    final isCrypto = CurrencyService.cryptoCurrencies.contains(symbol);
    
    if (isCrypto) {
      return Container(
        width: 40,
        height: 40,
        child: SvgPicture.asset(
          'assets/crypto_icons/${symbol.toLowerCase()}.svg',
          placeholderBuilder: (context) => Center(
            child: Text(
              symbol[0],
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          errorBuilder: (context, error, stackTrace) => Center(
            child: Text(
              symbol[0],
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      );
    } else {
      return Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: Colors.white24,
          shape: BoxShape.circle,
        ),
        child: Center(
          child: Text(
            fiatFlags[symbol] ?? symbol[0],
            style: TextStyle(fontSize: 20),
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF0156FE),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          // Currency Icon
          Container(
            margin: EdgeInsets.only(right: 12),
            child: _buildIcon(),
          ),

          // Currency Details
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  name,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  '24h',
                  style: TextStyle(
                    color: Colors.white70,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),

          // Price and Change
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(
                price,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
              SizedBox(height: 4),
              Text(
                change,
                style: TextStyle(
                  color: isPositive ? Colors.green[300] : Colors.red[300],
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class ChartPainter extends CustomPainter {
  final List<double> data;
  final Color lineColor;

  ChartPainter({required this.data, required this.lineColor});

  @override
  void paint(Canvas canvas, Size size) {
    if (data.isEmpty) return;

    final paint = Paint()
      ..color = lineColor
      ..strokeWidth = 2
      ..style = PaintingStyle.stroke;

    final path = Path();
    final max = data.reduce((a, b) => a > b ? a : b);
    final min = data.reduce((a, b) => a < b ? a : b);
    final range = max - min;
    final xStep = size.width / (data.length - 1);

    path.moveTo(0, size.height * (1 - (data[0] - min) / range));

    for (int i = 1; i < data.length; i++) {
      final x = xStep * i;
      final y = size.height * (1 - (data[i] - min) / range);
      path.lineTo(x, y);
    }

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(ChartPainter oldDelegate) => false;
} 